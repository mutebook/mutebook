@chr em /
@chr code ~

@toc how; How to write MB

= How to contribute to $MB

$Mb is an open project: both the website source code and the text are available on {gh:{$GH}|mutebook}. This section explains what authors need to know to contribute to $Mb.

== $GH basics

If you are not familiar with git and $GH, do first:

* Create your personal {:GitHub|https://github.com} account.
* Learn to {:create a repository|https://help.github.com/articles/create-a-repo/}, and {:edit files|https://help.github.com/articles/managing-files-on-github/} directly on $GH.
* Learn to {:clone|https://help.github.com/articles/cloning-a-repository/} a repository.
* Learn how to use ~git pull~, ~git commit~, and ~git push~.

== CM-book

$Mb is created as an online "CM-book" {---} a website with a book-like structure; the text is written in a document markup language called Compact Markup. The online {:documentation|https://compactmarkup.github.io/CM-book/} describes in detail how to make a {:CM-book|https://compactmarkup.github.io/CM-book/} and how to use the various features of {:Compact Markup|https://compactmarkup.github.io/CM-book/pages/cm/index.html}.

Before you begin,
- install the {:required software|https://compactmarkup.github.io/CM-book/pages/write/software.html} on your computer.

== Work with a local copy of $Mb

The recommended practice is:
* Make a "{:fork|https://guides.github.com/activities/forking}" of the main $Mb repository (unless you are one of the principal authors who have "push access" to the main repository, or you do not intend to contribute content back to $Mb).
* "Clone" the fork (or the main repository if you have not created the fork).
* Work with the local clone of the repository. Make and test changes.
* "Push" the changes back to the fork (or to the main reÃ¶pository if you are a principal author).
* If you wish to have the changes in your fork included in the main $Mb repository, make a "pull request".

== Local clone of a repository

To work with a local clone of the $Mb repository, first choose (and create) a place for it, for example:
~~~.bash
cd
mkdir LocalMutebook
cd LocalMutebook
~~~
Verify the location:
~~~.bash
pwd
~~~
{=>} {~/Users/.../LocalMutebook}

Clone the repository with submodules (the {:{$CM}|https://github.com/CompactMarkup} engine is a needed submodule):
~~~.bash
# the main repository
git clone --recursive git@github.com:mutebook/mutebook.git
# or a fork:
git clone --recursive git@github.com:<your github name>/mutebook.git
~~~
Use your $GH credentials. If you do not have a $GH account and will not upload (push) your changes, you may also clone the repository so:
~~~.bash
git clone --recursive https://github.com/mutebook/mutebook.git
~~~
This will create a new directory ~mutebook~ and download the $Mb content.

== Update the local repository clone

To update your local repository clone (to fetch changes that may have been made since the time the clone was created or last updated), do:
~~~.bash
# (in 'mutebook')
git pull --recurse-submodules
git submodule update
~~~

$GH documentation explains how to {:update the fork|https://help.github.com/articles/syncing-a-fork/} from the main repository.

== Running $Mb locally

$Mb is a web-based book and must be served by a web server. PHP has a built-in development server that can be used to that purpose:
~~~.bash
# (in 'mutebook')
php -S localhost:8053
~~~

{wp:{~localhost}|localhost} means 'this computer'. ~8053~ is the web server port number; the port must be available. You may choose another number, if you wish. If the port is 8000 or higher, $Mb will run in a "debug" mode.

Open the local {:mutebook web site|http://localhost:8053} in a web browser.

The web server can be terminated ("killed") by ~Ctrl+c~.

== Upload changes to $GH

See what files were changed and what were the changes:
~~~.bash
# (in 'mutebook')
git status
git diff
~~~

"Stage" the changes (only if /all/ changes are to be staged):
~~~.bash
git add --all
~~~
You can also use ~git add <file ...>~ to stage only selected files.

Commit the staged files:
~~~.bash
git commit -m '<a reasonable message>'
~~~

It is also possible to stage all /changed/ files (not new or deleted files) and commit them in one step:
~~~.bash
git commit -am '<a reasonable message>'
~~~

To update (amend) the last commit (if it has not yet been pushed):
~~~.bash
git commit --amend
~~~

Push to $GH:
~~~.bash
git push
~~~

If there were meanwhile changes made to the $GH repository (by other contributors), you may first need to update (pull) the local repository and merge the changes before push can succeed.

== Update $MbMe

If you are certain that the latest version pushed to the main repository of $Mb works, you may update the public {:{$Mb} website|{$MbMeUrl}} by opening a special link {:{$MbMeUrl}/pull.php?key=...} in a web browser. You must know the correct key, of course :)

# eof