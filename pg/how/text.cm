= Compact Markup (CM)
Page content is written using {:Compact Markup|https://github.com/CompactMarkup},
a simple, lightweight, extensible, and configurable document {wp markup language}.

The full documentation of CM is (will be, once finished) available at
{:GitHub Pages|https://compactmarkup.github.io/cm.docs/}.

= Formatting
This is only a very brief overview of CM:

== Escape
{~\\} can be used to "escape" the following character, if it would otherwise
trigger a markup processing. It also has two other functions:
* {~\\n} forces a line break
* {~\\} as the last non-blank character allows the content to continue on the
  following line.

~~~
\= this line is not a header and ends in a backslash: \\
====== This is a header that spreads \
over two source lines, and has a line break\n in it.
~~~
produces:
---.box
\= this line is not a header and ends in a backslash: \\
====== This is a header that spreads \
over two source lines, and has a line break\n in it.
---

== Comments
A line that starts with {~#} in the *first* position is a comment and will be ignored.
~~~
# a comment
~~~
produces nothing:
---.box
---

== Headers
Headers start with one or more (up to six) {~=} in the first position.
~~~
= First-level header
== Second level
==== Forth rulez
~~~
produces:
---.box
= First-level header
== Second level
==== Forth rulez
---

== Lists
{~-} resp. {~*} in the first position, followed by a space and then text, turns
that line into an item of an unordered resp. ordered list. The text of a list
item continues on the following line(s), if those begin with a whitespace.

Lists cannot be nested.
~~~
-.right floating right
* one
* two
* three,
  continued
- a
- b
- c
~~~
produces:
---.box
-.right floating right
* one
* two
* three,
  continued
- a
- b
- c
---

== Sections
Three {~-} in the first position on a line indicate the beginning or ending of
a "fenced" section block. The {~---} may be followed by a section tag, and then
by class attributes. Used section tags should correspond to {:HTML block-level
elements|https://www.w3schools.com/html/html_blocks.asp}. Sections /may/ be nested.

{~---} that is not followed by a section tag indicates a section ending,
if inside of a section; otherwise it indicates a section beginning and the tag
{~div} is assumed (which is, very likely, the most common case).

~~~
before floating boxes
--- div
---.box.left
floating left
---
---.box.right
floating right
---
---
~~~
produces:
---.box
before floating boxes
--- div
---.box.left
floating left
---
---.box.right
floating right
---
---
---

== Boxes
Boxes (see above) are sections of typ {~.box}.

~~~
---.box
Text in a box.
---
~~~
produces:
---.box
Text in a box.
---

== Horizontal line
Four or more {~-} in the first position:
~~~
text...
-------
text...
~~~
produce a horizonal line:
---.box
text...
-------
text...
---

== Paragraphs
Paragraph detection is automatic: as text blocks separated by blank lines,
headers, code blocks, sections, and horizontal lines. In addition,
lines that begin with {~.} in the first position also start a new paragraph.

~~~
Paragraph,
still the same paragraph.

A new paragraph.
On two source lines.
.Another paragraph without a blank line before it.
-----
Another one, after a horizontal line.
~~~
produces:
---.box
Paragraph,
still the same paragraph.

A new paragraph.
On two source lines.
.Another paragraph without a blank line before it.
-----
Another one, after a horizontal line.
---

= Hooks
Hooks are a powerful mechanism of CM. Hooks implement some built-in features and
also can be used to extend CM.

A hook starts with {~\{} and ends with {~\}}. Within a hook, {~\|} may separate
its arguments (called /parts/ in the following text).

Hooks are of three kinds:
* simple formatting hooks,
* typographical hooks, and
* processing hooks.

Hooks can be nested (hooks can occur within hooks).

== Simple formatting hooks
A simple formatting hook begins with {~\{}, followed by a single format
indicating character and a content. The format indicating character can be:
- {~*} for bolded text
- {~/} for emphasised text (italics)
- {~#} for monospaced text (inline code snippet)
- {~_} for underlined text
- {~'} for superscript
- {~,} for subscript

~~~
This is {*bold}, this is {/emphasized}, and this is {~monospaced and {*bold}}.
{_Underlined}, su{'per} and {,sub}script.
~~~
produces:
---.box
This is {*bold}, this is {/emphasized}, and this is {~monospaced and {*bold}}.
{_Underlined}, su{'per} and {,sub}script.
---

==== Shortcuts:
Since marking text as bold or emphasised may be done frequently, it is possible
to use a shortcut, by simply surrounding the text by a pair of {~*} resp. {~/}.
This feature must be first enabled on a page by:
~~~
@chr b  *
@chr em /
# put the above in the page text, only once, perhaps at the very top

This is *bold*, this is /emphasized/, and this /emphasised and *bold*/.
~~~
produces:
---.box
# put the above in the page text, only once, perhaps at the very top
This is *bold*, this is /emphasized/, and this /emphasised and *bold*/.
---

== Typographical hooks
Typographical hooks may be used to enter special characters into the output.
Of course, they are not strictly needed, since CM supports utf-8.
~~~
{=>} {<=} {->} {<-} {--} {---} ðŸ˜±
~~~

produces
---.box
{=>} {<=} {->} {<-} {--} {---} ðŸ˜±
---

== Processing hooks
A processing hook has, immediately after the opening {~\{}, a specific /tag/.
If the hook has parts (arguments), the first one is separated from the tag by
a blank space; the second and following parts are separated by {~\|}.

Three kinds of hooks are built-in in into the CM parser:

=== Links and anchors
The link ({~:}) hook has two parts: the text and the link. If only one part is
provided, it is used for both the text and the link.

==== Outside links

Outside links contain the protocol ({~http://}):

~~~
- {:https://github.com/mutebook}
- {:mutebook|https://github.com/mutebook}
~~~
produces:
---.box
- {:https://github.com/mutebook}
- {:mutebook|https://github.com/mutebook}
---

==== Wikipedia:

So often used, that it has its own hook:

~~~
{wp audio engineer} is a person who {wp records sound|Sound_recording_and_reproduction}.
~~~
produces:
---.box
{wp audio engineer} is a person who {wp records sound|Sound_recording_and_reproduction}.
---

==== Inside links

Inside links refer to other pages, using page identifiers as defined in the
{~TOC} files.

~~~
- Each good technical book needs a {:glossary}, fully called {:glossary of terms|glossary}.
~~~
produces:
---.box
- Each good technical book needs a {:glossary}, fully called {:glossary of terms|glossary}.
---

=== Images
An image hook has a tag {~img}, and two parts: the source link and an (optional)
alternate text. Images can come from the outside or inside the book:
- in Brackets: {img:img/liveReload_Brackets.png}  {img:how_software:img/liveReload_Brackets.png}

~~~
outside:
{img https://raw.githubusercontent.com/mutebook/docs/master/assets/icon32.png|image from GitHub}
inside:
{img how:images/mb.png|image relative to identifier prefix 'how'}
~~~
produces:
---.box
outside:
{img https://raw.githubusercontent.com/mutebook/docs/master/assets/icon32.png|image from GitHub}
inside:
{img how:images/mb.png|image relative to identifier prefix 'how'}
---

=== Formulas

Mathematical formulas can be entered using the TeX syntax and typeset by
{:KaTeX|https://khan.github.io/KaTeX/function-support.html}. Surround the
formulas by {~\{$} and {~$\}} (this is a special hook notation that does not
allow nested hooks and insted passes curly braces on to TeX).
~~~
{$ 20 \times 10^{0.0002} $}
~~~
produces:
---.box
{$ 20 \times 10^{0.0002} $}
---

=== In-text buttons

They look as if buttons, but are no buttons.
~~~
In-text {btn button}, {btn.r red button}, {btn.g green button}, {btn.b blue button}.
~~~
makes:
---.box
In-text {btn button}, {btn.r red button}, {btn.g green button}, {btn.b blue button}.
---

== Tables

The support of tables is in development ('experimental').
So far it is very basic: in a section 'table', {~[]} resp. {~()} delimit
table header cells resp. data cells:

~~~
Borderless:
--- table
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
With borders:
--- table.border
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
~~~
produces:
---.box
Borderless:
--- table
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
With borders:
--- table.border
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
---

= Prolog

If there is a special file named {~prolog} in a folder, the contents of the file is inserted before the contents of any {~.cm} file in that folder and all nested folders. If there are more prolog files on the path from {~pg/} to a {~.cm} file, the contents of the prolog files is combined.

The prolog files is a convenient way of setting CM properties to apply to all text files in a book, in a book section, etc.

For example, if an author prefers the shortcut notations {~\*bold\*} and {~\/emphasised\/}, instead of opening each text file with:
~~~
@chr b *
@chr em /
~~~
the above can be put only once once into the prolog file.

= Macros

Macros allow a simple identifier to represent a longer, arbitrary sequence of characters.

A macro is defined as: {~@def identifier text}. The macro definition must be on a separate line. The identifier is a sequence of letters and numbers, starting with a letter. The text can be anything, including spaces and other special characters. The spaces at the beginning and end will be trimmed, but spaces inside the text will be retained.

An example. Define nacros:

~~~
@def dB dB{,SPL}
@def SG {$\mathsf{S_{G}}$}
~~~

@def dB dB{,SPL}
@def SG {$\mathsf{S_{G}}$}

To use a macro, prepend the identifier with a {~$}:

~~~
$dB $SG $BAD \$NotAMacro
~~~
gives:
---.box
$dB $SG $BAD \$NotAMacro
---

It is possible to switch to another character for macro exansion, instead of {~$}, for example to {~%}:

~~~
@chr macro %
$dB $SG $BAD \$NotAMacro

%dB %SG %BAD \%NotAMacro
~~~
gives:
---.box
@chr macro %
$dB $SG $BAD \$NotAMacro

%dB %SG %BAD \%NotAMacro
---
