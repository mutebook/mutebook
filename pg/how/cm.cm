= $CM (CM)

Page content is written using {:{$CM}|https://github.com/CompactMarkup}, a simple, lightweight, extensible, and configurable document {wp: markup language}. This is only a very brief overview of CM features for beginning authors of $Mb.

CM is parsed line-by-line. A number of features are recognized by what character appears at the very beginning of a line (without any preceding blank space). This is referred to as the /first position/.

#-------------------------------------------------------------------------------
== Headers
Headers start with one or more, up to six, ~=~ in the first position.
~~~
= First-level header
=== Third level
==== Forth rulez
~~~
makes:
---.box
= First-level header
=== Third level
==== Forth rulez
---

The first-level header should be used only once, at the beginning of a page. The second-level headers, if used, will appear in the local page navigation menu.

#-------------------------------------------------------------------------------
== Escape character
~\\~ can be used to "escape" the character that follows it, if it would otherwise trigger a markup processing. That allows to include such a character in the text.

~~~
==== This is a fourth-level header
\==== This is not a header
~~~
makes:
---.box
==== This is a fourth-level header
\==== This is not a header
---

It also has two other functions:
* ~\\~ as the last non-blank character forces the content to continue on the following line, in a situation when only one source line is expected.
* ~\\n~ forces a line break in the output

~~~
==== This is a header that spreads \
over two source lines, and the result has a line\nbreak in it.
This line has the literal '\\n' in it and ends in a backslash: \\
~~~
makes:
---.box
==== This is a header that spreads \
over two source lines, and the result has a line\nbreak in it.
This line has the literal '\\n' in it and ends in a backslash: \\
---

#-------------------------------------------------------------------------------
== Comments
A line that starts with ~#~ in the first position is a comment and will be ignored.
~~~
# a comment
~~~
makes nothing:
---.box
# a comment
---

#-------------------------------------------------------------------------------
== Class attributes

In certain situations, ~.~ followed by a class name is a "class attribute" that modifes the look of the element it is applied to. Several class attributes can be used where a class attribute is expected.

#-------------------------------------------------------------------------------
== Lists

~-~ resp. ~*~ in the first position, followed by blank space and then text, turns that line into an item of an unordered resp. ordered list. The text of a list item continues on the following line(s) (without the need to use a trailing ~\/~), as long as those lines begin with blank space.

Lists cannot be nested.
~~~
-.right floating right one
- and two

* one
* two
* three,
  continued

- a
- b
- c
~~~
makes:
---.box
-.right floating right one
- and two

* one
* two
* three,
  continued

- a
- b
- c
---
Notice the ~.right~ class attribute applied to the first list item.

#-------------------------------------------------------------------------------
== Sections
Exactly three ~-~ in the first position indicate the beginning or ending of
a "fenced" section block. The ~---~ may be followed by a section tag and by class attributes. The choice of section tags should correspond to {:HTML block-level elements|https://www.w3schools.com/html/html_blocks.asp}. Sections /may/ be nested.

~---~ that is not followed by a section tag indicates a section ending,
if inside of a section; otherwise it indicates a section beginning and the tag
~div~ is assumed (which is, very likely, the most common case).

~~~
before floating boxes
--- 
--- .box.left
floating left
---
--- .box.right
floating right
---
---
~~~
is the same as:
~~~
before floating boxes
--- div
--- div.box.left
floating left
---
--- div.box.right
floating right
---
---
~~~
and makes:
---.box
before floating boxes
--- div
--- .box.left
floating left
---
--- .box.right
floating right
---
---
---

#-------------------------------------------------------------------------------
== Boxes
Boxes are ~div~ sections with class attribute ~.box~.

~~~
---.box
Text in a box.
---
~~~
makes:
---.box
Text in a box.
---

#-------------------------------------------------------------------------------
== Horizontal line
Four or more ~-~ in the first position:
~~~
text...
-------
text...
~~~
make a horizonal line:
---.box
text...
-------
text...
---

#-------------------------------------------------------------------------------
== Paragraphs
Paragraph detection is automatic. Paragraphs are blocks of text separated by blank lines, headers, code blocks, sections, and horizontal lines. In addition,
lines that begin with ~.~ in the first position also mark a beginning of a new paragraph.

~~~
Paragraph,
still the same paragraph.

A new paragraph.
On two source lines.
.Another paragraph without a blank line before it.
-----
Another one, after a horizontal line.
~~~
makes:
---.box
Paragraph,
still the same paragraph.

A new paragraph.
On two source lines.
.Another paragraph without a blank line before it.
-----
Another one, after a horizontal line.
---

#-------------------------------------------------------------------------------
== Outside links

The links to web resources that are outside of $Mb do typically begin with the /protocol identifier/ ~http:\/\/~ or ~https:\/\/~. To include an outside link in the text, put it between ~\{:~ and ~\}~: 

~~~
- {:https://github.com/mutebook}
- {:http://live-electronic-music.com}
~~~
makes:
---.box
- {:https://github.com/mutebook}
- {:http://live-electronic-music.com}
---

If a text other than the link itself should be shown, put the text after ~\{:~, then a ~|~, the link, and ~\}~: 

~~~
- {:Mutebook on GitHub|https://github.com/mutebook}
- {:Live-electronic music|http://live-electronic-music.com}
~~~
makes:
---.box
- {:Mutebook on GitHub|https://github.com/mutebook}
- {:Live-electronic music|http://live-electronic-music.com}
---

As a shortcut, if the protocol is not known or is not important, begin the link with a ~\/\/~:

~~~
- {://github.com/mutebook} 
- {://live-electronic-music.com}
- {:Mutebook on GitHub|//github.com/mutebook}
- {:Live-electronic music|//live-electronic-music.com}
~~~
makes:
---.box
- {://github.com/mutebook} 
- {://live-electronic-music.com}
- {:Mutebook on GitHub|//github.com/mutebook}
- {:Live-electronic music|//live-electronic-music.com}
---

==== Wikipedia:

Love it or hate it, Wikipedia is here and is often linked to. There is a shortcut that simplifies making links to it. Spaces in the text or the link reference are automatically replaced by ~_~:

~~~
An {wp: audio engineer} is a person who {wp: records sound|Sound_recording_and_reproduction}.
The recodings may be {wp:analogue|analog recording} or {wp:digital|digital recording}.
~~~
makes:
---.box
An {wp: audio engineer} is a person who {wp: records sound|Sound_recording_and_reproduction}. The recodings may be {wp:analogue|analog recording} or {wp:digital|digital recording}.
---

#-------------------------------------------------------------------------------
== Inside links and anchors

Inside links refer to other pages, using page identifiers as defined in the
 index files.

~~~
{:mb_glossary} ({:glossary of terms|mb_glossary}) is a necessary part of good technical books.
~~~
makes:
---.box
{:mb_glossary} ({:glossary of terms|mb_glossary}) is a necessary part of good technical books.
---

An inside link can link to a specific location on a page, that is marked by an anchor:

~~~
{#example_anchor} The anchor is invisible.
~~~
makes:
---.box
{#example_anchor} The anchor is invisible.
---

~~~
And this is a {:link to the anchor|#example_anchor}.
~~~
makes:
---.box
And this is a {:link to the anchor|#example_anchor}.
---

~~~
And this is a {:link to the anchor|#example_anchor}.
Another to a {:term definition|mb_glossary#term1}.
~~~
makes:
---.box
And this is a {:link to the anchor|#example_anchor}.
Another to a {:term definition|mb_glossary#term1}.
---

#-------------------------------------------------------------------------------
=== Images
An image hook has a tag {~img}, and two parts: the source link and an (optional)
alternate text. Images can come from the outside or inside the book:
- in Brackets: {img:img/liveReload_Brackets.png}  {img:how_software:img/liveReload_Brackets.png}

~~~
outside:
{img https://raw.githubusercontent.com/mutebook/docs/master/assets/icon32.png|image from $GH}
inside:
{img how:images/mb.png|image relative to identifier prefix 'how'}
~~~
makes:
---.box
outside:
{img https://raw.githubusercontent.com/mutebook/docs/master/assets/icon32.png|image from $GH}
inside:
{img how:images/mb.png|image relative to identifier prefix 'how'}
---









= Hooks
Hooks are a powerful mechanism of CM. Hooks implement some built-in features and
also can be used to extend CM.

A hook starts with {~\{} and ends with {~\}}. Within a hook, {~\|} may separate
its arguments (called /parts/ in the following text).

Hooks are of three kinds:
* simple formatting hooks,
* typographical hooks, and
* processing hooks.

Hooks can be nested (hooks can occur within hooks).

== Simple formatting hooks
A simple formatting hook begins with {~\{}, followed by a single format
indicating character and a content. The format indicating character can be:
- {~*} for bolded text
- {~/} for emphasised text (italics)
- {~#} for monospaced text (inline code snippet)
- {~_} for underlined text
- {~'} for superscript
- {~,} for subscript

~~~
This is {*bold}, this is {/emphasized}, and this is {~monospaced and {*bold}}.
{_Underlined}, su{'per} and {,sub}script.
~~~
makes:
---.box
This is {*bold}, this is {/emphasized}, and this is {~monospaced and {*bold}}.
{_Underlined}, su{'per} and {,sub}script.
---

==== Shortcuts:
Since marking text as bold or emphasised may be done frequently, it is possible
to use a shortcut, by simply surrounding the text by a pair of {~*} resp. {~/}.
This feature must be first enabled on a page by:
~~~
@chr b  *
@chr em /
# put the above in the page text, only once, perhaps at the very top

This is *bold*, this is /emphasized/, and this /emphasised and *bold*/.
~~~
makes:
---.box
# put the above in the page text, only once, perhaps at the very top
This is *bold*, this is /emphasized/, and this /emphasised and *bold*/.
---

== Typographical hooks
Typographical hooks may be used to enter special characters into the output.
Of course, they are not strictly needed, since CM supports utf-8.
~~~
{=>} {<=} {->} {<-} {--} {---} 😱
~~~
makes:
---.box
{=>} {<=} {->} {<-} {--} {---} 😱
---

== Processing hooks
A processing hook has, immediately after the opening {~\{}, a specific /tag/.
If the hook has parts (arguments), the first one is separated from the tag by
a blank space; the second and following parts are separated by {~\|}.

Three kinds of hooks are built-in in into the CM parser:

=== Links and anchors
The link ({~:}) hook has two parts: the text and the link. If only one part is
provided, it is used for both the text and the link.

=== Formulas

Mathematical formulas can be entered using the TeX syntax and typeset by
{:KaTeX|https://khan.github.io/KaTeX/function-support.html}. Surround the
formulas by {~\{$} and {~$\}} (this is a special hook notation that does not
allow nested hooks and insted passes curly braces on to TeX).
~~~
{$ 20 \times 10^{0.0002} $}
~~~
makes:
---.box
{$ 20 \times 10^{0.0002} $}
---

=== In-text buttons

They look as if buttons, but are no buttons.
~~~
In-text {btn button}, {btn.r red button}, {btn.g green button}, {btn.b blue button}.
~~~
makes:
---.box
In-text {btn button}, {btn.r red button}, {btn.g green button}, {btn.b blue button}.
---

== Tables

The support of tables is in development ('experimental').
So far it is very basic: in a section 'table', {~[]} resp. {~()} delimit
table header cells resp. data cells:

~~~
Borderless:
--- table
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
With borders:
--- table.border
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
~~~
makes:
---.box
Borderless:
--- table
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
With borders:
--- table.border
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
---

= Prolog

If there is a special file named {~prolog} in a folder, the contents of the file is inserted before the contents of any {~.cm} file in that folder and all nested folders. If there are more prolog files on the path from {~pg/} to a {~.cm} file, the contents of the prolog files is combined.

The prolog files is a convenient way of setting CM properties to apply to all text files in a book, in a book section, etc.

For example, if an author prefers the shortcut notations {~\*bold\*} and {~\/emphasised\/}, instead of opening each text file with:
~~~
@chr b *
@chr em /
~~~
the above can be put only once once into the prolog file.

= Macros

{#macros}

Macros allow a simple identifier to represent a longer, arbitrary sequence of characters.

A macro is defined as: {~@def identifier text}. The macro definition must be on a separate line. The identifier is a sequence of letters and numbers, starting with a letter. The text can be anything, including spaces and other special characters. The spaces at the beginning and end will be trimmed, but spaces inside the text will be retained.

An example. Define nacros:

~~~
@def dB dB{,SPL}
@def SG {$\mathsf{S_{G}}$}
~~~

@def dB dB{,SPL}
@def SG {$\mathsf{S_{G}}$}

To use a macro, prepend the identifier with a {~$}:

~~~
$dB $SG $BAD \$NotAMacro
~~~
gives:
---.box
$dB $SG $BAD \$NotAMacro
---

It is possible to switch to another character for macro exansion, instead of {~$}, for example to {~%}:

~~~
@chr macro %
$dB $SG $BAD \$NotAMacro

%dB %SG %BAD \%NotAMacro
~~~
gives:
---.box
@chr macro %
$dB $SG $BAD \$NotAMacro

%dB %SG %BAD \%NotAMacro
---
