= $CM (CM)

Page content is written using {:{$CM}|https://github.com/CompactMarkup}, a simple, lightweight, extensible, and configurable document {wp: markup language}. This is only a very brief overview of CM features for beginning authors of $Mb.

CM is parsed line-by-line. A number of features are recognized by what character appears at the very beginning of a line (without any preceding blank space). This is referred to as the /first position/.

#-------------------------------------------------------------------------------
== Headers
Headers start with one or more, up to six, ~=~ in the first position.
~~~
= First-level header
=== Third level
==== Forth rulez
~~~
makes:
---.box
= First-level header
=== Third level
==== Forth rulez
---

The first-level header should be used only once, at the beginning of a page. The second-level headers, if used, will appear in the local page navigation menu.

#-------------------------------------------------------------------------------
== Escape character
~\\~ can be used to "escape" the character that follows it, if it would otherwise trigger a markup processing. That allows to include such a character in the text.

~~~
==== This is a fourth-level header
\==== This is not a header
~~~
makes:
---.box
==== This is a fourth-level header
\==== This is not a header
---

It also has two other functions:
* ~\\~ as the last non-blank character forces the content to continue on the following line, in a situation when only one source line is expected.
* ~\\n~ forces a line break in the output

~~~
==== This is a header that spreads \
over two source lines, and the result has a line\nbreak in it.
This line has the literal '\\n' in it and ends in a backslash: \\
~~~
makes:
---.box
==== This is a header that spreads \
over two source lines, and the result has a line\nbreak in it.
This line has the literal '\\n' in it and ends in a backslash: \\
---

#-------------------------------------------------------------------------------
== Comments
A line that starts with ~#~ in the first position is a comment and will be ignored.
~~~
# a comment
~~~
makes nothing:
---.box
# a comment
---

#-------------------------------------------------------------------------------
== Class attributes

In certain situations, ~.~ followed by a class name is a "class attribute" that modifes the look of the element it is applied to. Several class attributes can be used where a class attribute is expected.

#-------------------------------------------------------------------------------
== Lists

~-~ resp. ~*~ in the first position, followed by blank space and then text, turns that line into an item of an unordered resp. ordered list. The text of a list item continues on the following line(s) (without the need to use a trailing ~\/~), as long as those lines begin with blank space.

Lists cannot be nested.
~~~
-.right floating right one
- and two

* one
* two
* three,
  continued

- a
- b
- c
~~~
makes:
---.box
-.right floating right one
- and two

* one
* two
* three,
  continued

- a
- b
- c
---
Notice the ~.right~ class attribute applied to the first list item.

#-------------------------------------------------------------------------------
== Sections
Exactly three ~-~ in the first position indicate the beginning or ending of
a "fenced" section block. The ~---~ may be followed by a section tag and by class attributes. The choice of section tags should correspond to {:HTML block-level elements|https://www.w3schools.com/html/html_blocks.asp}. Sections /may/ be nested.

~---~ that is not followed by a section tag indicates a section ending,
if inside of a section; otherwise it indicates a section beginning and the tag
~div~ is assumed (which is, very likely, the most common case).

~~~
before floating boxes
---
--- .box.left
floating left
---
--- .box.right
floating right
---
---
~~~
is the same as:
~~~
before floating boxes
--- div
--- div.box.left
floating left
---
--- div.box.right
floating right
---
---
~~~
and makes:
---.box
before floating boxes
--- div
--- .box.left
floating left
---
--- .box.right
floating right
---
---
---

#-------------------------------------------------------------------------------
== Boxes
Boxes are ~div~ sections with class attribute ~.box~.

~~~
---.box
Text in a box.
---
~~~
makes:
---.box
Text in a box.
---

#-------------------------------------------------------------------------------
== Horizontal line
Four or more ~-~ in the first position:
~~~
text...
-------
text...
~~~
make a horizonal line:
---.box
text...
-------
text...
---

#-------------------------------------------------------------------------------
== Paragraphs
Paragraph detection is automatic. Paragraphs are blocks of text separated by blank lines, headers, code blocks, sections, and horizontal lines. In addition,
lines that begin with ~.~ in the first position also mark a beginning of a new paragraph.

~~~
Paragraph,
still the same paragraph.

A new paragraph.
On two source lines.
.Another paragraph without a blank line before it.
-----
Another one, after a horizontal line.
~~~
makes:
---.box
Paragraph,
still the same paragraph.

A new paragraph.
On two source lines.
.Another paragraph without a blank line before it.
-----
Another one, after a horizontal line.
---

#-------------------------------------------------------------------------------
== Outside links

The links to web resources that are outside of $Mb do typically begin with the /protocol identifier/ ~http:\/\/~ or ~https:\/\/~. To include an outside link in the text, put it between ~\{:~ and ~\}~:

~~~
- {:https://github.com/mutebook}
- {:http://live-electronic-music.com}
~~~
makes:
---.box
- {:https://github.com/mutebook}
- {:http://live-electronic-music.com}
---

If a text other than the link itself should be shown, put the text after ~\{:~, then a ~|~, the link, and ~\}~:

~~~
- {:Mutebook on GitHub|https://github.com/mutebook}
- {:Live-electronic music|http://live-electronic-music.com}
~~~
makes:
---.box
- {:Mutebook on GitHub|https://github.com/mutebook}
- {:Live-electronic music|http://live-electronic-music.com}
---

As a shortcut, if the protocol is not known or is not important, begin the link with a ~\/\/~:

~~~
- {://github.com/mutebook}
- {://live-electronic-music.com}
- {:Mutebook on GitHub|//github.com/mutebook}
- {:Live-electronic music|//live-electronic-music.com}
~~~
makes:
---.box
- {://github.com/mutebook}
- {://live-electronic-music.com}
- {:Mutebook on GitHub|//github.com/mutebook}
- {:Live-electronic music|//live-electronic-music.com}
---

==== Wikipedia:

Love it or hate it, Wikipedia is here and is often linked to. There is a shortcut that simplifies making links to it. Spaces in the text or the link reference are automatically replaced by ~_~:

~~~
An {wp: audio engineer} is a person who {wp: records sound|Sound_recording_and_reproduction}.
The recodings may be {wp:analogue|analog recording} or {wp:digital|digital recording}.
~~~
makes:
---.box
An {wp: audio engineer} is a person who {wp: records sound|Sound_recording_and_reproduction}. The recodings may be {wp:analogue|analog recording} or {wp:digital|digital recording}.
---

#-------------------------------------------------------------------------------
== Inside links and anchors

Inside links refer to other pages, using page identifiers as defined in the
 index files.

~~~
{:mb_glossary} ({:glossary of terms|mb_glossary}) is a necessary part of good technical books.
~~~
makes:
---.box
{:mb_glossary} ({:glossary of terms|mb_glossary}) is a necessary part of good technical books.
---

An inside link can link to a specific location on a page, that is marked by an anchor:

~~~
{#example_anchor} The anchor is invisible.
~~~
makes:
---.box
{#example_anchor} The anchor is invisible.
---

~~~
And this is a {:link to the anchor|#example_anchor} on this page.
Another to a {:term definition|mb_glossary#term1} {---} an anchor on another page.
~~~
makes:
---.box
And this is a {:link to the anchor|#example_anchor} on this page.
Another to a {:term definition|mb_glossary#term1} {---} an anchor on another page.
---

#-------------------------------------------------------------------------------
== Images

Image files included in the text may come from the outside or inside of $Mb. An image may also a specified size (width, height, or both), and an alternate text.

The size and alternate text follow (optional) ~|~. If an alternate text is specified, but not image size, the text follows ~||~.

The width and height of an image (in pixels) are two numbers, separated by 'x'. Either or both numbers maybe omitted:
- ~100~ {---} width
- ~100x~ {---} width
- ~x60~ {---} height
- ~100x60~ {---} width and height
- ~x~ {---} none (but size is still specified)

==== Outside images

As with links, the url of an image begins with ~http:\/\/~, ~https:\/\/~, or ~\/\/~.

~~~
Mutebook {img: http://raw.githubusercontent.com/mutebook/mutebook/master/assets/icon32.png} is hosted by GitHub {img://github.com/favicon.ico|This is a cat octicon}
~~~
makes:
---.box
Mutebook {img: http://raw.githubusercontent.com/mutebook/mutebook/master/assets/icon32.png} is hosted by GitHub {img://github.com/favicon.ico||This is a cat octicon}
---

==== Inside images

The location of an inside image may be relative to the $Mb root, to a named page, or to the current page.
- root-relative image: begins with a single ~\/~
~~~
root-relative: {img:/assets/icon32.png}
~~~
makes:
---.box
root-relative: {img:/assets/icon32.png}
---

- named-page-relative: begins with a page identifier and ~:~
~~~
named-page-relative, with size:
- width:  {img:how:images/mic.png|16} or {img:how:images/mic.png|16x}
- height: {img:how:images/mic.png|x24}
- width and height: {img:how:images/mic.png|24x16}
~~~
makes:
---.box
named-page-relative, with size:
- width:  {img:how:images/mic.png|16} or {img:how:images/mic.png|16x}
- height: {img:how:images/mic.png|x24}
- width and height: {img:how:images/mic.png|24x16}
---

- current-page-relative: contains the image file name with an optional relative path.
~~~
current-page-relative: {img:images/mic.png|18}
~~~
makes:
---.box
current-page-relative: {img:images/mic.png|18}
#TODO {img:./images/mic.png|x24} does not work (generator eats . ?)
---

#-------------------------------------------------------------------------------
== Text formatting

Portions of text may be marked for text formatting:

~~~
Text can be {/emphasized}, {*bold},
{_underlined}, {~monospaced (code)},
{'superscript}or{,subscript}.
~~~
makes:
---.box
Text can be {/emphasized}, {*bold},
{_underlined}, {~monospaced (code)},
{'superscript}or{,subscript}.
---

Formatting can be also combined:
~~~
This text is {/emphasised and {_underlined{'superscript}}}.
~~~
makes:
---.box
This text is {/emphasised and {_underlined{'superscript}}}.
---

==== Shortcuts

Since marking text as emphasised, bolded, etc. may be done frequently, it is possible to use formatting shortcuts: simply surrounding the text by a pair of ~\/~, ~*~, etc. The shortcuts must be first enabled, by including these lines (only select what is needed):
~~~
@chr em /
@chr b *
@chr u _
@chr code ~
@chr sup '
@chr sub ,

This is *bold*, this is /emphasized/, and this /emphasised and *bold*/.
~~~
makes:
---.box
This is *bold*, this is /emphasized/, and this /emphasised and *bold*/.
---

Hint: put the lines that enable formatting shortcuts in a {:prolog file|how_pages#prolog}.

#-------------------------------------------------------------------------------
== Typography

$Mb text may contain Unicode (UTF8) characters. A few selected, often used special characters can be also entered as:

~~~
{=>} {<=} {->} {<-} {--} {---}
~~~
makes:
---.box
{=>} {<=} {->} {<-} {--} {---}
---

#== Hooks
#A processing hook has, immediately after the opening {~\{}, a specific /tag/.
#If the hook has parts (arguments), the first one is separated from the tag by
#a blank space; the second and following parts are separated by {~\|}.
#Three kinds of hooks are built-in into CM: format, typography, processing

#-------------------------------------------------------------------------------
== Formulas

Mathematical formulas can be entered using the TeX syntax and are typeset by {:KaTeX|https://khan.github.io/KaTeX/function-support.html}. Surround the formulas by ~\{\$\$~ and ~\$\$\}~:

~~~
{$$ 20 \times 10^{0.0002} $$}
~~~
makes:
---.box
{$$ 20 \times 10^{0.0002} $$}
---

#-------------------------------------------------------------------------------
== Notes

$Mb text may contain three kinds of notes:
- footnotes
- editorial notes
- todo placeholders

Footnotes are of the usual kind:
~~~
This text has an attached footnote.{fn: This is a example footnote.}
~~~
makes:
---.box
This text has an attached footnote.{fn: This is a example footnote.}
---

Editorial notes are visible only if $Mb is run locally (not in the version hosted at $MbMe):
~~~
An editor marked a {ed:mizzpelling|Please korrekt this.}.
~~~
makes:
---.box
An editor marked a {ed:mizzpelling|Please korrekt this.}.
---

Todo placeholders:
~~~
This feature {todo: does not yet exist}.
~~~
makes:
---.box
This feature {todo: does not yet exist}.
---

#-------------------------------------------------------------------------------
== In-text buttons

They look as if buttons, but are no buttons.
~~~
In-text {btn: button}, {btn:.r red button}, {btn:.g green button}, {btn:.b blue button}.
~~~
makes:
---.box
In-text {btn: button}, {btn:.r red button}, {btn:.g green button}, {btn:.b blue button}.
---

#-------------------------------------------------------------------------------
== Macros

{#macros}

Macros allow a simple identifier to represent a longer, arbitrary sequence of characters.

A macro is defined as: {~@def identifier text...}. The identifier is a sequence of letters and numbers. The text can be anything, including spaces and other special characters. The spaces at the beginning and end will be trimmed, but spaces inside the text will be retained.

Define macros:
~~~
@def dB dB{,SPL}
@def SG {$$\mathsf{S_{G}}$$}
~~~

@def dB dB{,SPL}
@def SG {$$\mathsf{S_{G}}$$}

To use a macro, put ~\$~ before the macro identifier:
~~~
$dB $SG
~~~
gives:
---.box
$dB $SG
---

To prevent macro expansion, escape the ~\$~:
~~~
$BAD \$NotAMacro
~~~
gives:
---.box
$BAD \$NotAMacro
---

It is possible to switch to another character for macro exansion, instead of {~$}, for example to {~%}:

~~~
@chr macro %
$dB $SG $BAD \$NotAMacro

%dB %SG %BAD \%NotAMacro
~~~
gives:
---.box
@push
@chr macro %
$dB $SG $BAD \$NotAMacro

%dB %SG %BAD \%NotAMacro
@pop
---

#-------------------------------------------------------------------------------
== Tables

The support of tables is in development. So far it is very basic: in a section 'table', ~[~ and ~]~, resp. ~(~ and ~)~ delimit table header cells resp. data cells:

~~~
Borderless:
--- table
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
With borders:
--- table.border
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
~~~
makes:
---.box
Borderless:
--- table
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
With borders:
--- table.border
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
---
