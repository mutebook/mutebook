= Work with a local copy of $Mb

== $GH basics

* Create your personal {:https://github.com} account.
* Learn to {:create a repository|https://help.github.com/articles/create-a-repo/}, and {:edit files|https://help.github.com/articles/managing-files-on-github/} directly on $GH.
* Learn to {:clone|https://help.github.com/articles/cloning-a-repository/} a repository.
* Learn how to use ~git pull~, ~git commit~, and ~git push~.

== Local copy of $Mb

==== Clone the repository

Make a local clone of the $Mb repository. First, choose (and create) a place for the local working copy of mutebook, for example:
~~~
cd
mkdir LocalMutebook
cd LocalMutebook
~~~
Verify the location:
~~~
pwd
~~~
{>>} ~\/Users\/...\/LocalMutebook~

Clone the repository:
~~~
git clone git@github.com:mutebook/mutebook.git
~~~
Use your $GH credentials. If you do not have a $GH account and will not upload (push) your changes, you may also clone the repository so:
~~~
git clone https://github.com/mutebook/mutebook.git
~~~
$Mb uses a {:Compact Markup|https://github.com/CompactMarkup} engine as a submodule. Initialize the submodule:
~~~
cd mutebook
git submodule init
git submodule update
~~~

==== Update the local repository clone

== W

{#web server}
## 2. Run the local web server and mutebook pages
~~~
cd mutebook   # 'mutebook' was created by the git clone
~~~
Start the development web server that is included in php (ver. 7):
~~~
php -S localhost:8053
# or 'php -e -S localhost:8053' if you will be debugging the code
~~~
*8053* is the web server port number; you may choose another.

Open the local mutebook web site [http://localhost:8053](localhost:8053) in a we
b browser.

## 3. Read the 'How to' section of mutebook

*More instructions are there.*

*Namely: **how to create and edit mutebook pages**.*

## 4. See what changes you have made

(Kill the php web server by {~Ctrl+c`.)

[$GH Desktop](https://desktop.github.com/) or similar come really handy. Or,
work in the terminal:

See what files were changed:
~~~
git status
git diff
~~~

Stage the changes:
~~~
git add --all # only if *all* changes are to be staged
~~~

Commit the staged files:
~~~
git commit -m '<a reasonable message>'
~~~

It is also possible to stage all changed files (but not new or deleted files) an
d commit them in one step:
~~~
git commit -a -m '<a reasonable message>'
~~~

To update (amend) the last commit (that has not been yet pushed):
~~~
git commit --amend
~~~

Push to $GH:
~~~
git push
~~~

Next time, update:
~~~
git pull
~~~
