= Set up software for local $Mb

$Mb is a web-based book and is hosted online at {:{$MbMeUrl}}. You may choose to install a local copy of $Mb, running directly on your computer. A local copy allows you to:
- use $Mb without an Internet connection,
- serve $Mb on a local network, and, namely
- further develop $Mb.

#-------------------------------------------------------------------------------
== PHP 7

In order to use a local  installation of mutebook and to create or modify mutebook content you need {:PHP 7|http://php.net}.

=== On Mac OSX (Sierra):

==== 1. Xcode
Install (or update) {:Xcode|https://en.wikipedia.org/wiki/Xcode} from the {:Mac App Store|https://itunes.apple.com/us/app/xcode/id497799835?mt=12}.
Xcode is needed for Homebrew.

==== 2. Homebrew
Install (or update) {:Homebrew|https://brew.sh}. Homebrew provides an easy way to install and manage software packages.

To install Homebrew, run in the Terminal:
~~~.bash
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
~~~
To update Homebrew:
~~~.bash
brew update
brew upgrade
~~~

==== 3. PHP 7
Use Homebrew to install PHP version 7.1.

"Tap" a php repository:
~~~.bash
brew tap homebrew/homebrew-php
~~~
Install PHP:
~~~.bash
brew install php71
~~~
Verify the PHP version:
~~~.bash
php -v
~~~
The reply ought to start with {=>} ~PHP 7.1...~

==== 4. Optionally: xdebug
For PHP debugging (advanced use; needed only if you will be developing the php code):

Install xdebug:
~~~.bash
brew install php71-xdebug
~~~
Verify the installation success:
~~~.bash
php -i | grep 'xdebug support'
~~~
The reply ought to be {=>} ~xdebug support => enabled~

Look up the location of the active ~php.ini~ file:
~~~.bash
php -i | grep php.ini
~~~
 {=>} {~Loaded Configuration File => /usr/local/etc/php/7.1/php.ini}

Edit the ~php.ini~ file ({~sudo nano /usr/local/etc/php/7.1/php.ini}).
Add the following:
~~~.ini
[XDebug]
xdebug.remote_enable = 1
xdebug.remote_autostart = 1
~~~
Verify:
~~~
php -i | grep xdebug.remote_enable
~~~
{=>} ~xdebug.remote_enable => On => On~
~~~
php -i | grep xdebug.remote_autostart
~~~
{=>} ~xdebug.remote_autostart => On => On~

=== On Linux:
You know what to do.

=== On Windows:
You are on your own.

#-------------------------------------------------------------------------------
== Brackets

The content of mutebook is stored in so-called {wp:plain text} files. For editing plain text files it is best to use a so-called {wp:source code editor}. There are many possibilities; we recommend {:Brackets|http://brackets.io}.

==== Preferences

Change the preferences to your liking (on Mac: /Brackets\/Preferences.../, on Linux: /Debug\/Open Preferences File/). We recommend to switch the display of line numbers off ~"showLineNumbers": false~).

==== LiveReload

Brackets can instantly update $Mb shown in a browser whenever a source file is changed and saved in Brackets.
- Install the LiveReload extension in Brackets: /File\/Extension Manager.../, /Available/, search 'LiveReload', install.
- Install the LiveReload plugin in your browser: follow the {:respective link here|https://github.com/pwalczyszyn/brackets-livereload} ("Install plugin for your
 browser").

==== Live-edit $Mb text

Start the PHP built-in web server in the terminal and open the mutebook web pages in a browser, as described {:here|how_local}. Open the mutebook content (the ~pg\/~ folder) in Brackets (/File\/Open Folder.../).

Enable LiveReload:
- in Brackets: {img:images/liveReload_Brackets.png}, and
- in the browser: {img:images/liveReload_browser.png}.

When a file is saved in Brackets, the browser will automatically refresh.
