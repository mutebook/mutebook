= Compact Markup (CM)
Page content is written using {:Compact Markup|https://github.com/CompactMarkup},
a simple, lightweight, extensible, and configurable document {wp markup language}.

The full documentation of CM is (will be, once finished) available at
{:GitHub Pages|https://compactmarkup.github.io/cm.docs/}.

= Formatting
This is only a very brief overview of CM:

== Escape
{~\\} can be used to "escape" the following character, if it would otherwise
trigger a markup processing. It also has two other functions:
* {~\\n} forces a line break
* {~\\} as the last non-blank character allows the content to continue on the
  following line.

~~~.nohighlight
\= this line is not a header and ends in a backslash: \\
====== This is a header that spreads \
over two source lines, and has a line break\n in it.
~~~
produces:
---.box
\= this line is not a header and ends in a backslash: \\
====== This is a header that spreads \
over two source lines, and has a line break\n in it.
---

== Comments
A line that starts with {~#} in the *first* position is a comment and will be ignored.
~~~.nohighlight
# a comment
~~~
produces nothing:
---.box
---

== Headers
Headers start with one or more (up to six) {~=} in the first position.
~~~.nohighlight
= First-level header
== Second level
==== Forth rulez
~~~
produces:
---.box
= First-level header
== Second level
==== Forth rulez
---

== Lists
{~-} resp. {~*} in the first position, followed by a space and then text, turns
that line into an item of an unordered resp. ordered list. The text of a list
item continues on the following line(s), if those begin with a whitespace.

Lists cannot be nested.
~~~.nohighlight
-.right floating right
* one
* two
* three,
  continued
- a
- b
- c
~~~
produces:
---.box
-.right floating right
* one
* two
* three,
  continued
- a
- b
- c
---

== Sections
Three {~-} in the first position on a line indicate the beginning or ending of
a "fenced" section block. The {~---} may be followed by a section tag, and then
by class attributes. Used section tags should correspond to {:HTML block-level
elements|https://www.w3schools.com/html/html_blocks.asp}. Sections /may/ be nested.

{~---} that is not followed by a section tag indicates a section ending,
if inside of a section; otherwise it indicates a section beginning and the tag
{~div} is assumed (which is, very likely, the most common case).

~~~.nohighlight
before floating boxes
--- div
---.box.left
floating left
---
---.box.right
floating right
---
---
~~~
produces:
---.box
before floating boxes
--- div
---.box.left
floating left
---
---.box.right
floating right
---
---
---

== Boxes
Boxes (see above) are sections of typ {~.box}.

~~~.nohighlight
---.box
Text in a box.
---
~~~
produces:
---.box
Text in a box.
---

== Horizontal line
Four or more {~-} in the first position:
~~~.nohighlight
text...
-------
text...
~~~
produce a horizonal line:
---.box
text...
-------
text...
---

== Paragraphs
Paragraph detection is automatic: as text blocks separated by blank lines,
headers, code blocks, sections, and horizontal lines. In addition,
lines that begin with {~.} in the first position also start a new paragraph.

~~~.nohighlight
Paragraph,
still the same paragraph.

A new paragraph.
On two source lines.
.Another paragraph without a blank line before it.
-----
Another one, after a horizontal line.
~~~
produces:
---.box
Paragraph,
still the same paragraph.

A new paragraph.
On two source lines.
.Another paragraph without a blank line before it.
-----
Another one, after a horizontal line.
---

= Hooks
Hooks are a powerful mechanism of CM. Hooks implement some built-in features and
also can be used to extend CM.

A hook starts with {~\{} and ends with {~\}}. Within a hook, {~\|} may separate
its arguments (called /parts/ in the following text).

Hooks are of three kinds:
* simple formatting hooks,
* typographical hooks, and
* processing hooks.

Hooks can be nested (hooks can occur within hooks).

== Simple formatting hooks
A simple formatting hook begins with {~\{}, followed by a single format
indicating character and a content. The format indicating character can be:
- {~*} for bolded text
- {~/} for emphasised text (italics)
- {~#} for monospaced text (inline code snippet)
- {~_} for underlined text
- {~'} for superscript
- {~,} for subscript

~~~.nohighlight
This is {*bold}, this is {/emphasized}, and this is {~monospaced and {*bold}}.
{_Underlined}, su{'per} and {,sub}script.
~~~
produces:
---.box
This is {*bold}, this is {/emphasized}, and this is {~monospaced and {*bold}}.
{_Underlined}, su{'per} and {,sub}script.
---

==== Shortcuts:
Since marking text as bold or emphasised may be done frequently, it is possible
to use a shortcut, by simply surrounding the text by a pair of {~*} resp. {~/}.
This feature must be first enabled on a page by:
~~~.nohighlight
@chr b  *
@chr em /
# put the above in the page text, only once, perhaps at the very top

This is *bold*, this is /emphasized/, and this /emphasised and *bold*/.
~~~
produces:
---.box
# put the above in the page text, only once, perhaps at the very top
This is *bold*, this is /emphasized/, and this /emphasised and *bold*/.
---

== Typographical hooks
Typographical hooks may be used to enter special characters into the output.
Of course, they are not strictly needed, since CM supports utf-8.
~~~.nohighlight
{=>} {<=} {->} {<-} {--} {---} ðŸ˜±
~~~

produces
---.box
{=>} {<=} {->} {<-} {--} {---} ðŸ˜±
---

== Processing hooks
A processing hook has, immediately after the opening {~\{}, a specific /tag/.
If the hook has parts (arguments), the first one is separated from the tag by
a blank space; the second and following parts are separated by {~\|}.

Three kinds of hooks are built-in in into the CM parser:

=== Links and anchors
The link ({~:}) hook has two parts: the text and the link. If only one part is
provided, it is used for both the text and the link.

==== Outside links

Outside links contain the protocol ({~http://}):

~~~.nohighlight
- {:https://github.com/mutebook}
- {:mutebook|https://github.com/mutebook}
~~~
produces:
---.box
- {:https://github.com/mutebook}
- {:mutebook|https://github.com/mutebook}
---

==== Wikipedia:

So often used, that it has its own hook:

~~~.nohighlight
{wp audio engineer} is a person who {wp records sound|Sound_recording_and_reproduction}.
~~~
produces:
---.box
{wp audio engineer} is a person who {wp records sound|Sound_recording_and_reproduction}.
---

==== Inside links

Inside links refer to other pages, using page identifiers as defined in the
{~TOC} files.

~~~.nohighlight
- Each good technical book needs a {:glossary}, fully called {:glossary of terms|glossary}.
- Mutebook has an automatic table of content, up to {:three levels|toc_test3/2:index} deep.
~~~
produces:
---.box
- Each good technical book needs a {:glossary}, fully called {:glossary of terms|glossary}.
- Mutebook has an automatic table of content, up to {:three levels|toc_test3/2:index} deep.
---

=== Images
An image hook has a tag {~img}, and two parts: the source link and an (optional)
alternate text. Images can come from the outside or inside the book:

~~~.nohighlight
outside:
{img https://raw.githubusercontent.com/mutebook/docs/master/assets/icon32.png|image from GitHub}
inside:
{img ht/images/mb.png|image relative to identifier prefix 'ht'}
~~~
produces:
---.box
outside:
{img https://raw.githubusercontent.com/mutebook/docs/master/assets/icon32.png|image from GitHub}
inside:
{img ht/images/mb.png|image relative to identifier prefix 'ht'}
---

=== Formulas

Mathematical formulas can be entered using the TeX syntax and typeset by
{:KaTeX|https://khan.github.io/KaTeX/function-support.html}. Surround the
formulas by {~\{$} and {~$\}} (this is a special hook notation that does not
allow nested hooks and insted passes curly braces on to TeX).
~~~.nohighlight
{$ 20 \times 10^{0.0002} $}
~~~
produces:
---.box
{$ 20 \times 10^{0.0002} $}
---

=== In-text buttons

They look as if buttons, but are no buttons.
~~~.nohighlight
In-text {btn button}, {btn.r red button}, {btn.g green button}, {btn.b blue button}.
~~~
makes:
---.box
In-text {btn button}, {btn.r red button}, {btn.g green button}, {btn.b blue button}.
---

== Tables

The support of tables is in development ('experimental').
So far it is very basic: in a section 'table', {~[]} resp. {~()} delimit
table header cells resp. data cells:

~~~.nohighlight
Borderless:
--- table
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
With borders:
--- table.border
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
~~~
produces:
---.box
Borderless:
--- table
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
With borders:
--- table.border
[th1][th2][th3][th4]
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
(td1)(td2)(td3)(td4)
---
---