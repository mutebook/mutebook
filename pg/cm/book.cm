@chr b  *
@chr em /
#-------------------------------------------------------------------------------
= CM-enabled website
CM is a simple, lightweight, extensible, and configurable compact markup
language, in this package together with a template and associated javascript
machinery for creating navigable web sites.

This website is itself a CM-enabled website.
To make your own, follow these steps:

== 1. Copy the repository content
Keep these files:
~~~.nohiglight
index.html
conf.js
sc_project.js

assets/icon.ico

cm/*.js (cm.js, cm_index.js, init.js, load.js, page.js, need6.js)
cm/main.css
cm/assets/highlight.pack.js
cm/theme/menu.svg
cm/theme/*.woff2
~~~

== 2. Configure
Edit {~conf.js}:
- {~cm.book.conf.title}: the website title
- {~cm.book.conf.banner}: text on the navigation banner
- {~cm.book.toc}: individual pages and their corresponding entries in the menu
  ([level, text])

Edit {~statcounter.js} if you wish to use your own {:http://statcounter.com}
project. If not, remove the "statcounter >>>" segment from {~cm/load.js}.

== 3. Create pages
Follow the example of {~pages/*.html}. Each page starts from the template:
~~~
<!DOCTYPE html><html lang="en">
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="../assets/main.css">
  <script charset="utf-8" src="../js/init.js"><\/script>
</head>
<body>
</body>
</html>
~~~

If the page is in a different place than one level below the website root,
change {~href="../assets/main.css"} and {~src="../js/init.js"} accordingly.

=== Source text
Add the source (CM) text for the page to the page body.
There are two possibilities:
* as preformatted text
* as a multi-line ES6 "template string" literal

==== As preformatted text
Put the CM text between
{~<body><pre>} and {~<pre></body>}. See the {~*.html} files for an example.

Caveat: Since the CM text is a part of a HTML web page, {~<} and {~&} must be
written as {~&lt;} and {~&amp;}, if they would otherwise be interpreted as HTML
markup.

==== As a multi-line string literal
Put the CM text between
{~<body><script>cm.book.source = \`} and {~\`<\/script></body>}.
See the {~website.html} file (this page) for an example.

Caveat: Since the CM text is a JavaScript ("interpolated") string,
- {~\\\\} must be doubled; it means that to insert a /literal/ {~\\\\} into the
  output, it must be quadrupled in the source
- {~<\/script>} must not occur in the text; to have {~<\/script>} in the output
  (such as right here), it must be written as {~<\\\\\/script>} in the source
  (and to have {~<\\\\\/script>} in the output needs to be
  {~<\\\\\\\\\\\\\\\\\/script>} in the source, and so on ... ðŸ˜µ)

== 4. Publish
Upload the whole assembly to a webserver, or push to GitHub Pages-enabled repository.
.That's it for now.

----
{prev.left Back: } {next.right Next: }
#-------------------------------------------------------------------------------

